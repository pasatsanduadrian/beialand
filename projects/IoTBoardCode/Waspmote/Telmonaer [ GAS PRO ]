#include <WaspFrame.h>
#include <WaspSensorGas_Pro.h>
#include <WaspWIFI_PRO.h> 


// choose socket (SELECT USER'S SOCKET)
uint8_t socket = SOCKET0;
///////////////////////////////////////


// choose URL settings
///////////////////////////////////////
char type[] = "http";
char host[] = "82.78.81.171";
char port[] = "80";
///////////////////////////////////////

uint8_t error;
uint8_t status;
unsigned long previous;

//Gas CO2_PRO_sensor(SOCKET_1);
Gas NO2_PRO_sensor(SOCKET_2);
//Gas CO_PRO_sensor(SOCKET_3);
Gas O3_PRO_sensor(SOCKET_4);
//Gas H2_PRO_sensor(SOCKET_5);
Gas SO2_PRO_sensor(SOCKET_6);

// Stores the concentration level in ppm
//float CO2concentration; 
float NO2concentration;
//float COconcentration;   
float O3concentration;
//float H2concentration;
float SO2concentration;  

// MBE280
float temperature; // Stores the temperature in ÂºC
float humidity;     // Stores the realitve humidity in %RH
float pressure;    // Stores the pressure in Pa

char node_ID[] = "TELMONAER2";

void setup()
{
    USB.println(F("Start program"));  
    USB.println(F("***************************************"));  
    USB.println(F("Once the module is set with one or more"));
    USB.println(F("AP settings, it attempts to join the AP"));
    USB.println(F("automatically once it is powered on"));    
    USB.println(F("Refer to example 'WIFI_PRO_01' to configure"));  
    USB.println(F("the WiFi module with proper settings"));
    USB.println(F("***************************************"));
  
    // open USB port
    USB.ON();
    USB.println(F("Electrochemical gas sensor example"));

    frame.setID(node_ID);
    
    
} 


void loop()

{
   // get actual time
  previous = millis();
  //////////////////////////////////////////////////
  // 1. Switch ON
  //////////////////////////////////////////////////  
  error = WIFI_PRO.ON(socket);

  if (error == 0)
  {    
    USB.println(F("WiFi switched ON"));
  }
  else
  {
    USB.println(F("WiFi did not initialize correctly"));
  }
  //////////////////////////////////////////////////
  // 2. Join AP
  //////////////////////////////////////////////////  
  // check connectivity
  status =  WIFI_PRO.isConnected();

  // check if module is connected
  if (status == true)
  {    
    USB.print(F("WiFi is connected OK"));
    USB.print(F(" Time(ms):"));    
    USB.println(millis()-previous);

/////////////////////////////////////////
    // 1. Turn on the sensors
    // Read enviromental variables
    //CO2_PRO_sensor.ON();
    NO2_PRO_sensor.ON();
    //CO_PRO_sensor.ON();
    O3_PRO_sensor.ON();
    //H2_PRO_sensor.ON();
    SO2_PRO_sensor.ON();

// Sensors need time to warm up and get a response from gas
    // To reduce the battery consumption, use deepSleep instead delay
  USB.println(F("*******After 2 minutes, Waspmote wakes up thanks to the RTC Alarm ******"));
    // After 2 minutes, Waspmote wakes up thanks to the RTC Alarm  
  PWR.deepSleep("00:00:02:00", RTC_OFFSET, RTC_ALM1_MODE1, ALL_ON);
    // 2. Read sensors
    
  /////////// BME280
  temperature = NO2_PRO_sensor.getTemp();
  humidity = NO2_PRO_sensor.getHumidity();
  pressure = NO2_PRO_sensor.getPressure();

  //CO2concentration = CO2_PRO_sensor.getConc();
  NO2concentration = NO2_PRO_sensor.getConc();
 // COconcentration = CO_PRO_sensor.getConc();
  O3concentration = O3_PRO_sensor.getConc();
 //H2concentration = H2_PRO_sensor.getConc();
  SO2concentration = SO2_PRO_sensor.getConc();
      
  // And print the values via USB
    USB.println(F("***************************************"));
    USB.print(F("Temperature: "));
    USB.print(temperature);
    USB.println(F(" Celsius degrees"));
    USB.print(F("RH: "));
    USB.print(humidity);
    USB.println(F(" %"));
    USB.print(F("Pressure: "));
    USB.print(pressure);
    USB.println(F(" Pa"));

    //USB.print(F("CO2 concentration: "));
    //USB.print(CO2concentration);
    //USB.println(F(" ppm"));

     USB.print(F("NO2 concentration: "));
     USB.print(NO2concentration);
     USB.println(F(" ppm"));
    
    //USB.print(F("CO concentration: "));
    //USB.print(COconcentration);
    //USB.println(F(" ppm"));

   USB.print(F("O3 concentration: "));
   USB.print(O3concentration);
   USB.println(F(" ppm"));

   // USB.print(F("H2 concentration: "));
   // USB.print(H2concentration);
    //USB.println(F(" ppm"));

    USB.print(F("SO2 concentration: "));
    USB.print(SO2concentration);
    USB.println(F(" ppm"));
    USB.println(F("***************************************"));


    /////////////////////////////////////////

    USB.println(F("******Gas sensors off******"));

    // 1. Turn on the sensors
    // Read enviromental variables
    //CO2_PRO_sensor.OFF();
   NO2_PRO_sensor.OFF();
    //CO_PRO_sensor.OFF();
   O3_PRO_sensor.OFF();
    //H2_PRO_sensor.OFF();
    SO2_PRO_sensor.OFF();

///////////////////////////////////////////
  // 3. Create ASCII frame
  ///////////////////////////////////////////
  // Create new frame (ASCII)
  frame.createFrame(BINARY, node_ID);
  // BME280
  frame.addSensor(SENSOR_GASES_PRO_TC, temperature);
  frame.addSensor(SENSOR_GASES_PRO_HUM, humidity);
  frame.addSensor(SENSOR_GASES_PRO_PRES, pressure); 
  //frame.addSensor(SENSOR_GASES_PRO_CO2, CO2concentration);
  frame.addSensor(SENSOR_GASES_PRO_NO2, NO2concentration);
  //frame.addSensor(SENSOR_GASES_PRO_CO, COconcentration);
 frame.addSensor(SENSOR_GASES_PRO_O3, O3concentration);
  //frame.addSensor(SENSOR_GASES_PRO_H2, H2concentration);
  frame.addSensor(SENSOR_GASES_PRO_SO2, SO2concentration);

  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel());
  // Show the frame
  frame.showFrame();
 ///////////////////////////////
    // 3.2. Send Frame to Meshlium
    ///////////////////////////////

    // http frame
    error = WIFI_PRO.sendFrameToMeshlium( type, host, port, frame.buffer, frame.length);

    // check response
    if (error == 0)
    {
      USB.println(F("HTTP OK"));          
      USB.print(F("HTTP Time from OFF state (ms):"));    
      USB.println(millis()-previous);
    }
    else
    {
      USB.println(F("Error calling 'getURL' function"));
      WIFI_PRO.printErrorCode();
    }
  }
  else
  {
    USB.print(F("WiFi is connected ERROR")); 
    USB.print(F(" Time(ms):"));    
    USB.println(millis()-previous);  
  }

  //////////////////////////////////////////////////
  // 3. Switch OFF
  //////////////////////////////////////////////////  
  WIFI_PRO.OFF(socket);
  USB.println(F("WiFi switched OFF\n\n")); 
  USB.println(F("Go to deepsleep After 30 minutes, Waspmote wakes up thanks to the RTC Alarm")); 

// Go to deepsleep  
    // After 30 seconds, Waspmote wakes up thanks to the RTC Alarm
  PWR.deepSleep("00:00:30:00", RTC_OFFSET, RTC_ALM1_MODE1, ALL_OFF);
}
